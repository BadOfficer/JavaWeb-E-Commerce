openapi: 3.1.0
info:
  title: Product API
  description: API for managing products data
  version: 1.0.0

paths:
  /api/v1/products:
    get:
      summary: Get all products
      tags:
        - Products
      responses:
        200:
          description: List of all products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDtoList'
    post:
      summary: Create a new product
      tags:
        - Products
      requestBody:
        description: User data to create a new product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestDto'

      responses:
        200:
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDto'

        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    put:
      summary: Update a product
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product
      requestBody:
        description: User data to update an exist product
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequestDto'
      responses:
        200:
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      summary: Delete a product
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product
      responses:
        200:
          description: Product created
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'



  /api/v1/products/{id}:
    get:
      summary: Get product by ID
      tags:
        - Products
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: ID of the product
      responses:
        200:
          description: Product found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductResponseDto'
        404:
          description: Product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:

    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: URI reference identifying the error type
        title:
          type: string
          description: A short description of the error
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Detailed description of the error

    ValidationError:
      type: object
      properties:
        status:
          type: string
          example: '400'
        errors:
          type: array
          items:
            $ref: '#/components/schemas/ParamsViolationDetails'

    ProductResponseDtoList:
      type: array
      items:
        $ref: '#/components/schemas/ProductResponseDto'

    ProductResponseDto:
      type: object
      properties:
        id:
          type: string
          description: Id of the product
        title:
          type: string
          description: Title of the product
        description:
          type: string
          description: Description of the product
        price:
          type: number
          description: Price of the product
        status:
          type: string
          description: Status of the product

    ParamsViolationDetails:
      type: object
      properties:
        fieldName:
          type: string
          description: Field where validation error occurred
        reason:
          type: string
          description: Reason for the validation error

    ProductRequestDto:
      type: object
      required:
        - title
        - description
        - price
        - categoryId
      properties:
        title:
          type: string
          description: Title of the product (must include specific keywords and cannot exceed 50 characters)
          maxLength: 50
        description:
          type: string
          description: Detailed description of the product (cannot exceed 255 characters)
          maxLength: 255
        price:
          type: number
          format: double
          description: Price of the product (required)
        categoryId:
          type: integer
          description: ID of the category (required)
        status:
          type: string
          description: Status of the product (optional)
          enum:
            - IN_STOCK
            - OUT_OF_STOCK
            - DISCONTINUED
